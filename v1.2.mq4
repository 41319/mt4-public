//+------------------------------------------------------------------+
//|                                                      HKIndex.mq4 |
//|                        Generated by MetaEditor                   |
//|                                              https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Your Name"
#property link      "https://www.yourwebsite.com"
#property version   "1.20"
#property strict

// Input parameters
input double LotSize = 0.01;
input int TrailingStopPoints = 30 * 10;      // Only activates in profit
input int BreakevenTriggerPoints = 50 * 10;  // Profit level to activate stop
input int MaxOrders = 10;
input int MagicNumber = 12345;
input double PriceLevelAdjustment = 25 * 10;
input bool UsePercentage = false;
input int OrderExpirationHours = 24;         // Pending order expiration
input double GapThresholdPoints = 26 * 10;   // Points above/below level to trigger recalculation
input bool TradeLong = true;                 // Toggle between long and short positions

// Global variables
double priceLevels[];
datetime lastCheckDate = 0;
double monthlyVolume = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   monthlyVolume = CalculateClosedVolumeThisMonth();
   UpdatePriceLevels();
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("HKIndex EA deinitialized");
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   bool isNewDay = TimeDay(TimeCurrent()) != TimeDay(lastCheckDate);
   
   if(isNewDay)
   {
      monthlyVolume = CalculateClosedVolumeThisMonth();
      Print("New day detected. Monthly volume so far: ", monthlyVolume);
      lastCheckDate = TimeCurrent();
   }
   
   // Check if price has moved beyond our levels + gap threshold
   if(CheckPriceGap() || isNewDay)
   {
      UpdatePriceLevels();
      CloseAllPendingOrders();
   }
   
   ManageOrders();
   CheckForTrailingStop();
   DeleteAllArrows();
}

//+------------------------------------------------------------------+
//| Check if current price exceeds levels by gap threshold           |
//+------------------------------------------------------------------+
bool CheckPriceGap()
{
   if(ArraySize(priceLevels) == 0) return false;
   
   double currentPrice = MarketInfo(Symbol(), MODE_BID);
   double gapThreshold = GapThresholdPoints * MarketInfo(Symbol(), MODE_POINT);
   
   if(TradeLong)
   {
      double highestLevel = priceLevels[ArrayMaximum(priceLevels)];
      if(currentPrice > (highestLevel + gapThreshold))
      {
         Print("Price gap detected (", currentPrice, " > ", highestLevel, " + ", gapThreshold, "). Recalculating levels.");
         return true;
      }
   }
   else // Short positions
   {
      double lowestLevel = priceLevels[ArrayMinimum(priceLevels)];
      if(currentPrice < (lowestLevel - gapThreshold))
      {
         Print("Price gap detected (", currentPrice, " < ", lowestLevel, " - ", gapThreshold, "). Recalculating levels.");
         return true;
      }
   }
   return false;
}

//+------------------------------------------------------------------+
//| Count existing orders with matching symbol and magic             |
//+------------------------------------------------------------------+
int CountOrders()
{
   int count = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            count++;
         }
      }
   }
   return count;
}

//+------------------------------------------------------------------+
//| Place a pending order (BuyLimit or SellLimit)                    |
//+------------------------------------------------------------------+
void PlaceOrder(int index)
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   int digits = (int)MarketInfo(Symbol(), MODE_DIGITS);
   double triggerPrice = priceLevels[index];
   datetime expiryTime = TimeCurrent() + OrderExpirationHours * 3600;
   int orderType = TradeLong ? OP_BUYLIMIT : OP_SELLLIMIT;
   color orderColor = TradeLong ? clrGreen : clrRed;

   // Safety checks
   if(TradeLong && triggerPrice >= MarketInfo(Symbol(), MODE_ASK))
   {
      Print("BuyLimit trigger price too high. Skipping. Trigger: ", triggerPrice, " >= Ask: ", MarketInfo(Symbol(), MODE_ASK));
      return;
   }
   
   if(!TradeLong && triggerPrice <= MarketInfo(Symbol(), MODE_BID))
   {
      Print("SellLimit trigger price too low. Skipping. Trigger: ", triggerPrice, " <= Bid: ", MarketInfo(Symbol(), MODE_BID));
      return;
   }

   Print("Attempting ", (TradeLong ? "BUYLIMIT" : "SELLLIMIT"), " @ ", triggerPrice);
   int ticket = OrderSend(Symbol(), orderType, LotSize, triggerPrice, 3, 0, 0, "HKIndex EA", MagicNumber, expiryTime, orderColor);

   if(ticket < 0)
      Print("OrderSend failed. Error: ", GetLastError());
   else
      Print("Order placed. Ticket #", ticket);
}

//+------------------------------------------------------------------+
//| Manage all orders - create new ones if needed                    |
//+------------------------------------------------------------------+
void ManageOrders()
{
   int count = CountOrders();
   
   for(int i = 0; i < MaxOrders; i++)
   {
      bool orderExists = false;
      for(int j = 0; j < OrdersTotal(); j++)
      {
         if(OrderSelect(j, SELECT_BY_POS, MODE_TRADES))
         {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber &&
               MathAbs(OrderOpenPrice() - priceLevels[i]) < MarketInfo(Symbol(), MODE_POINT))
            {
               orderExists = true;
               break;
            }
         }
      }

      if(!orderExists && count < MaxOrders)
      {
         PlaceOrder(i);
         count++;
      }
   }
}

//+------------------------------------------------------------------+
//| Update price levels based on current market price                |
//+------------------------------------------------------------------+
void UpdatePriceLevels()
{
   double currentPrice = MarketInfo(Symbol(), MODE_BID);
   ArrayResize(priceLevels, MaxOrders);
   
   for(int i = 0; i < MaxOrders; i++)
   {
      if(UsePercentage)
      {
         priceLevels[i] = TradeLong 
            ? currentPrice * (1 - (PriceLevelAdjustment / 100.0 * (i + 1)))
            : currentPrice * (1 + (PriceLevelAdjustment / 100.0 * (i + 1)));
      }
      else
      {
         priceLevels[i] = TradeLong
            ? NormalizeDouble(currentPrice - (PriceLevelAdjustment * (i + 1) * MarketInfo(Symbol(), MODE_POINT)), (int)MarketInfo(Symbol(), MODE_DIGITS))
            : NormalizeDouble(currentPrice + (PriceLevelAdjustment * (i + 1) * MarketInfo(Symbol(), MODE_POINT)), (int)MarketInfo(Symbol(), MODE_DIGITS));
      }
      Print("Price Level ", i+1, ": ", priceLevels[i]);
   }
}

//+------------------------------------------------------------------+
//| Close all pending orders                                         |
//+------------------------------------------------------------------+
void CloseAllPendingOrders()
{
   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber && 
            (OrderType() == OP_BUYLIMIT || OrderType() == OP_SELLLIMIT))
         {
            bool result = OrderDelete(OrderTicket());
            if(!result)
               Print("Failed to delete order. Error: ", GetLastError());
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Calculate closed order volume for current month                  |
//+------------------------------------------------------------------+
double CalculateClosedVolumeThisMonth()
{
   double totalVolume = 0.0;
   datetime monthStart = iTime(NULL, PERIOD_MN1, 0);
   
   for(int i = OrdersHistoryTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
      {
         if(OrderCloseTime() >= monthStart && OrderMagicNumber() == MagicNumber)
         {
            totalVolume += OrderLots();
         }
      }
   }
   return totalVolume;
}

//+------------------------------------------------------------------+
//| Smart Trailing Stop - Only protects profits                      |
//+------------------------------------------------------------------+
void CheckForTrailingStop()
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            if(OrderType() == OP_BUY && TradeLong)
            {
               double currentProfit = MarketInfo(Symbol(), MODE_BID) - OrderOpenPrice();
               double currentStop = OrderStopLoss();
               
               // Check if we should activate stop protection
               if(currentProfit >= BreakevenTriggerPoints * point)
               {
                  double newStop = OrderOpenPrice() + (currentProfit - TrailingStopPoints * point);
                  
                  // Only move stop if it's higher than current stop or no stop set
                  if(currentStop == 0 || newStop > currentStop)
                  {
                     if(!OrderModify(OrderTicket(), OrderOpenPrice(), newStop, 0, 0, clrNONE))
                        Print("Failed to modify stop. Error: ", GetLastError());
                  }
               }
            }
            else if(OrderType() == OP_SELL && !TradeLong)
            {
               double currentProfit = OrderOpenPrice() - MarketInfo(Symbol(), MODE_ASK);
               double currentStop = OrderStopLoss();
               
               // Check if we should activate stop protection
               if(currentProfit >= BreakevenTriggerPoints * point)
               {
                  double newStop = OrderOpenPrice() - (currentProfit - TrailingStopPoints * point);
                  
                  // Only move stop if it's lower than current stop or no stop set
                  if(currentStop == 0 || newStop < currentStop)
                  {
                     if(!OrderModify(OrderTicket(), OrderOpenPrice(), newStop, 0, 0, clrNONE))
                        Print("Failed to modify stop. Error: ", GetLastError());
                  }
               }
            }
         }
      }
   }
}

void DeleteAllArrows()
{
    int total = ObjectsTotal();
    for(int i = total-1; i >= 0; i--)
    {
        string name = ObjectName(i);
        if(ObjectType(name) == OBJ_ARROW)
        {
            ObjectDelete(name);
        }
    }
}