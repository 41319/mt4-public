//+------------------------------------------------------------------+
//|                                                      HKIndex.mq4 |
//|                        Generated by MetaEditor                   |
//|                                              https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Your Name"
#property link      "https://www.yourwebsite.com"
#property version   "1.38"
#property strict

// Enumeration for trading modes
enum ENUM_TRADING_MODE
{
   MODE_LONG,    // Long positions only
   MODE_SHORT,   // Short positions only
   MODE_MIXED    // Both long and short positions
};

// Input parameters
input double LotSize = 0.01;
input int TrailingStopPoints = 30 * 10;      // Only activates in profit
input int BreakevenTriggerPoints = 50 * 10;  // Profit level to activate stop
input int MaxOrders = 10;
input double PriceLevelAdjustment = 25 * 10;
input bool UsePercentage = false;
input int OrderExpirationHours = 24;         // Pending order expiration
input double GapThresholdPoints = 26 * 10;   // Points above/below level to trigger recalculation
input ENUM_TRADING_MODE TradingMode = MODE_MIXED; // Trading mode

// Working variables
int workingTrailingStopPoints;
int workingBreakevenTriggerPoints;
double workingPriceLevelAdjustment;
double workingGapThresholdPoints;

// Global variables
double longPriceLevels[];
double shortPriceLevels[];
datetime lastCheckDate = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Apply multiplier for US30 symbol to working variables
   double multiplier = (Symbol() == "US30") ? 10.0 : 1.0;
   
   workingTrailingStopPoints = (int)(TrailingStopPoints * multiplier);
   workingBreakevenTriggerPoints = (int)(BreakevenTriggerPoints * multiplier);
   workingPriceLevelAdjustment = PriceLevelAdjustment * multiplier;
   workingGapThresholdPoints = GapThresholdPoints * multiplier;
   
   if(multiplier == 10.0)
   {
      Print("US30 detected. Applying 10x multiplier to working parameters:");
      Print("WorkingTrailingStopPoints=", workingTrailingStopPoints);
      Print("WorkingBreakevenTriggerPoints=", workingBreakevenTriggerPoints);
      Print("WorkingPriceLevelAdjustment=", workingPriceLevelAdjustment);
      Print("WorkingGapThresholdPoints=", workingGapThresholdPoints);
   }
   
   UpdatePriceLevels();
   UpdateChartDisplay(); // Display input variables on chart
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   DeleteChartDisplay(); // Clean up display objects
   DeleteAllArrows();    // Clean up arrow objects
   Print("HKIndex EA deinitialized");
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   bool isNewDay = TimeDay(TimeCurrent()) != TimeDay(lastCheckDate);
   
   if(isNewDay)
   {
      Print("New day detected.");
      lastCheckDate = TimeCurrent();
      UpdateChartDisplay(); // Update display on new day
   }
   
   // Check if price has moved beyond our levels + gap threshold
   if(CheckPriceGap() || isNewDay)
   {
      UpdatePriceLevels();
      CloseAllPendingOrders();
      UpdateChartDisplay(); // Update display after level changes
   }
   
   ManageOrders();
   CheckForTrailingStop();
}

//+------------------------------------------------------------------+
//| Count open and pending orders for the current symbol             |
//+------------------------------------------------------------------+
void CountMarketOrders(int &openCount, int &pendingCount)
{
    openCount = 0;
    pendingCount = 0;
    for(int i = 0; i < OrdersTotal(); i++)
    {
        if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
        {
            if(OrderType() == OP_BUY || OrderType() == OP_SELL)
            {
                openCount++;
            }
            else if(OrderType() == OP_BUYLIMIT || OrderType() == OP_SELLLIMIT)
            {
                pendingCount++;
            }
        }
    }
}

//+------------------------------------------------------------------+
//| Update display with input variables                              |
//+------------------------------------------------------------------+
void UpdateChartDisplay()
{
    // Clean previous display objects to prevent overlap on re-init
    DeleteChartDisplay();

    string modeStr = "Mixed";
    if(TradingMode == MODE_LONG) modeStr = "Long Only";
    if(TradingMode == MODE_SHORT) modeStr = "Short Only";
    
    int openOrders, pendingOrders;
    CountMarketOrders(openOrders, pendingOrders);
    
    //--- Determine text color based on chart background for readability ---
    color bgColor = (color)ChartGetInteger(0, CHART_COLOR_BACKGROUND);
    color textColor = (bgColor == clrBlack || bgColor == clrNavy) ? clrWhite : clrBlack;


    // Create text labels for each input parameter, positioned from the bottom-right
    CreateOrUpdateText("Display_Mode", "Trading Mode: " + modeStr, 5, 15, textColor, true);
    CreateOrUpdateText("Display_Gap", "Gap Threshold: " + DoubleToString(GapThresholdPoints, 1) + " pts", 5, 30, textColor, true);
    CreateOrUpdateText("Display_Expiry", "Order Expiry: " + IntegerToString(OrderExpirationHours) + " hours", 5, 45, textColor, true);
    CreateOrUpdateText("Display_Adjust", "Price Adjustment: " + DoubleToString(PriceLevelAdjustment, 1) + (UsePercentage ? "%" : " pts"), 5, 60, textColor, true);
    CreateOrUpdateText("Display_MaxOrders", "Max Orders: " + IntegerToString(MaxOrders), 5, 75, textColor, true);
    CreateOrUpdateText("Display_BE", "Breakeven Trigger: " + IntegerToString(BreakevenTriggerPoints) + " pts", 5, 90, textColor, true);
    CreateOrUpdateText("Display_Trail", "Trailing Stop: " + IntegerToString(TrailingStopPoints) + " pts", 5, 105, textColor, true);
    CreateOrUpdateText("Display_LotSize", "Lot Size: " + DoubleToString(LotSize, 2), 5, 120, textColor, true);
    CreateOrUpdateText("Display_PendingOrders", "Pending Orders: " + IntegerToString(pendingOrders), 5, 135, textColor, true);
    CreateOrUpdateText("Display_OpenOrders", "Open Orders: " + IntegerToString(openOrders), 5, 150, textColor, true);
    CreateOrUpdateText("Display_Header", "--- HKIndex Settings ---", 5, 165, textColor, true);
    
    ChartRedraw();
}

//+------------------------------------------------------------------+
//| Helper to create or update a text object                         |
//+------------------------------------------------------------------+
void CreateOrUpdateText(string name, string text, int x, int y, color clr, bool backdrop)
{
    if(ObjectFind(0, name) != 0)
    {
        ObjectCreate(0, name, OBJ_LABEL, 0, 0, 0);
        ObjectSetInteger(0, name, OBJPROP_XDISTANCE, x);
        ObjectSetInteger(0, name, OBJPROP_YDISTANCE, y);
        ObjectSetInteger(0, name, OBJPROP_CORNER, CORNER_RIGHT_LOWER);
        ObjectSetInteger(0, name, OBJPROP_ANCHOR, ANCHOR_RIGHT); // Align text to the right
    }
    ObjectSetString(0, name, OBJPROP_TEXT, text);
    ObjectSetInteger(0, name, OBJPROP_COLOR, clr);
    ObjectSetInteger(0, name, OBJPROP_BACK, backdrop);
}

//+------------------------------------------------------------------+
//| Delete all display text objects from chart                       |
//+------------------------------------------------------------------+
void DeleteChartDisplay()
{
    string prefix = "Display_";
    for(int i = ObjectsTotal(0, -1, OBJ_LABEL) - 1; i >= 0; i--)
    {
        string name = ObjectName(0, i, -1, OBJ_LABEL);
        if(StringFind(name, prefix, 0) == 0)
        {
            ObjectDelete(0, name);
        }
    }
}


//+------------------------------------------------------------------+
//| Check if current price exceeds levels by gap threshold           |
//+------------------------------------------------------------------+
bool CheckPriceGap()
{
   double currentPrice = MarketInfo(Symbol(), MODE_BID);
   double gapThreshold = workingGapThresholdPoints * MarketInfo(Symbol(), MODE_POINT);
   
   if(TradingMode == MODE_LONG || TradingMode == MODE_MIXED)
   {
      if(ArraySize(longPriceLevels) > 0)
      {
         double highestLevel = longPriceLevels[ArrayMaximum(longPriceLevels)];
         if(currentPrice > (highestLevel + gapThreshold))
         {
            Print("Price gap detected (", currentPrice, " > ", highestLevel, " + ", gapThreshold, "). Recalculating levels.");
            return true;
         }
      }
   }
   
   if(TradingMode == MODE_SHORT || TradingMode == MODE_MIXED)
   {
      if(ArraySize(shortPriceLevels) > 0)
      {
         double lowestLevel = shortPriceLevels[ArrayMinimum(shortPriceLevels)];
         if(currentPrice < (lowestLevel - gapThreshold))
         {
            Print("Price gap detected (", currentPrice, " < ", lowestLevel, " - ", gapThreshold, "). Recalculating levels.");
            return true;
         }
      }
   }
   
   return false;
}

//+------------------------------------------------------------------+
//| Count existing orders with matching symbol                       |
//+------------------------------------------------------------------+
int CountOrders()
{
   int count = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
      {
         count++;
      }
   }
   return count;
}

//+------------------------------------------------------------------+
//| Create order comment with parameters                             |
//+------------------------------------------------------------------+
string CreateOrderComment()
{
   string comment = StringFormat("HKIndex|Lots=%.2f|Trail=%d|BE=%d|Max=%d|Adj=%.1f|%s|Exp=%dh|Gap=%.1f|Mode=%d",
      LotSize,
      workingTrailingStopPoints,
      workingBreakevenTriggerPoints,
      MaxOrders,
      workingPriceLevelAdjustment,
      UsePercentage ? "Pct" : "Pts",
      OrderExpirationHours,
      workingGapThresholdPoints,
      TradingMode);
      
   return comment;
}

//+------------------------------------------------------------------+
//| Check if a potential price level is too close to existing orders |
//+------------------------------------------------------------------+
bool IsLevelTooClose(double potentialLevel, bool isLong)
{
   double minDistance = workingGapThresholdPoints * MarketInfo(Symbol(), MODE_POINT);
   
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
      {
         double orderPrice = OrderOpenPrice();
         
         // For a potential long level (BuyLimit)
         if(isLong)
         {
            // Check against existing sell orders/limits
            if(OrderType() == OP_SELL || OrderType() == OP_SELLLIMIT)
            {
               if(potentialLevel >= orderPrice - minDistance)
               {
                  Print("Potential long level ", potentialLevel, " is too close to existing sell order #", OrderTicket(), " at ", orderPrice);
                  return true;
               }
            }
            // Check against existing buy orders/limits
            else if(OrderType() == OP_BUY || OrderType() == OP_BUYLIMIT)
            {
               if(MathAbs(potentialLevel - orderPrice) < minDistance)
               {
                  Print("Potential long level ", potentialLevel, " is too close to existing buy order #", OrderTicket(), " at ", orderPrice);
                  return true;
               }
            }
         }
         // For a potential short level (SellLimit)
         else // !isLong
         {
            // Check against existing buy orders/limits
            if(OrderType() == OP_BUY || OrderType() == OP_BUYLIMIT)
            {
               if(potentialLevel <= orderPrice + minDistance)
               {
                  Print("Potential short level ", potentialLevel, " is too close to existing buy order #", OrderTicket(), " at ", orderPrice);
                  return true;
               }
            }
            // Check against existing sell orders/limits
            else if(OrderType() == OP_SELL || OrderType() == OP_SELLLIMIT)
            {
               if(MathAbs(potentialLevel - orderPrice) < minDistance)
               {
                  Print("Potential short level ", potentialLevel, " is too close to existing sell order #", OrderTicket(), " at ", orderPrice);
                  return true;
               }
            }
         }
      }
   }
   return false;
}


//+------------------------------------------------------------------+
//| Place a pending order (BuyLimit or SellLimit)                    |
//+------------------------------------------------------------------+
bool PlaceOrder(int index, bool isLong)
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   int digits = (int)MarketInfo(Symbol(), MODE_DIGITS);
   double triggerPrice = isLong ? longPriceLevels[index] : shortPriceLevels[index];
   datetime expiryTime = TimeCurrent() + OrderExpirationHours * 3600;
   int orderType = isLong ? OP_BUYLIMIT : OP_SELLLIMIT;
   color orderColor = isLong ? clrGreen : clrRed;
   string comment = CreateOrderComment();

   // Safety checks
   if(isLong && triggerPrice >= MarketInfo(Symbol(), MODE_ASK))
   {
      Print("BuyLimit trigger price too high. Skipping. Trigger: ", triggerPrice, " >= Ask: ", MarketInfo(Symbol(), MODE_ASK));
      return false;
   }
   
   if(!isLong && triggerPrice <= MarketInfo(Symbol(), MODE_BID))
   {
      Print("SellLimit trigger price too low. Skipping. Trigger: ", triggerPrice, " <= Bid: ", MarketInfo(Symbol(), MODE_BID));
      return false;
   }

   Print("Attempting ", (isLong ? "BUYLIMIT" : "SELLLIMIT"), " @ ", triggerPrice);
   int ticket = OrderSend(Symbol(), orderType, LotSize, triggerPrice, 3, 0, 0, comment, 0, expiryTime, orderColor);

   if(ticket < 0)
   {
      Print("OrderSend failed. Error: ", GetLastError());
      return false;
   }
   else
   {
      Print("Order placed. Ticket #", ticket);
      UpdateChartDisplay(); // Update display after placing order
      return true;
   }
}

//+------------------------------------------------------------------+
//| Manage all orders - create new ones if needed                    |
//+------------------------------------------------------------------+
void ManageOrders()
{
   int count = CountOrders();
   
   // Handle long orders
   if(TradingMode == MODE_LONG || TradingMode == MODE_MIXED)
   {
      for(int i = 0; i < ArraySize(longPriceLevels); i++)
      {
         if (count >= MaxOrders) break; // Exit if max orders reached

         bool orderExists = false;
         for(int j = 0; j < OrdersTotal(); j++)
         {
            if(OrderSelect(j, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
            {
               if(OrderType() == OP_BUYLIMIT &&
                  MathAbs(OrderOpenPrice() - longPriceLevels[i]) < MarketInfo(Symbol(), MODE_POINT))
               {
                  orderExists = true;
                  break;
               }
            }
         }

         if(!orderExists)
         {
            if(PlaceOrder(i, true))
               count++; // Increment only on success
         }
      }
   }
   
   // Handle short orders
   if(TradingMode == MODE_SHORT || TradingMode == MODE_MIXED)
   {
      for(int i = 0; i < ArraySize(shortPriceLevels); i++)
      {
         if (count >= MaxOrders) break; // Exit if max orders reached

         bool orderExists = false;
         for(int j = 0; j < OrdersTotal(); j++)
         {
            if(OrderSelect(j, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
            {
               if(OrderType() == OP_SELLLIMIT &&
                  MathAbs(OrderOpenPrice() - shortPriceLevels[i]) < MarketInfo(Symbol(), MODE_POINT))
               {
                  orderExists = true;
                  break;
               }
            }
         }

         if(!orderExists)
         {
            if(PlaceOrder(i, false))
               count++; // Increment only on success
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Update price levels based on current market price                |
//+------------------------------------------------------------------+
void UpdatePriceLevels()
{
    double bidPrice = MarketInfo(Symbol(), MODE_BID);
    double askPrice = MarketInfo(Symbol(), MODE_ASK);
    int maxOrdersPerSide = (int)MathFloor(MaxOrders / (TradingMode == MODE_MIXED ? 2.0 : 1.0));
    int digits = (int)MarketInfo(Symbol(), MODE_DIGITS);

    // Temporary arrays to hold the new valid levels
    double tempLongLevels[];
    double tempShortLevels[];
    int longCount = 0;
    int shortCount = 0;

    // --- Generate and Filter Long Levels (based on BID) ---
    if (TradingMode == MODE_LONG || TradingMode == MODE_MIXED)
    {
        ArrayResize(tempLongLevels, maxOrdersPerSide);
        for (int i = 0; i < maxOrdersPerSide; i++)
        {
            double potentialLevel;
            if (UsePercentage)
            {
                potentialLevel = bidPrice * (1 - (workingPriceLevelAdjustment / 100.0 * (i + 1)));
            }
            else
            {
                potentialLevel = NormalizeDouble(
                   bidPrice - (workingPriceLevelAdjustment * (i + 1) * MarketInfo(Symbol(), MODE_POINT)),
                   digits);
            }

            if (!IsLevelTooClose(potentialLevel, true))
            {
                if(longCount < maxOrdersPerSide)
                {
                   tempLongLevels[longCount] = potentialLevel;
                   longCount++;
                }
            }
        }
        ArrayResize(longPriceLevels, longCount);
        ArrayCopy(longPriceLevels, tempLongLevels, 0, 0, longCount);
        
        Print("Generated ", longCount, " valid long price levels.");
        for(int i=0; i<longCount; i++) Print("Long Price Level ", i+1, ": ", longPriceLevels[i]);
    }

    // --- Generate and Filter Short Levels (based on ASK) ---
    if (TradingMode == MODE_SHORT || TradingMode == MODE_MIXED)
    {
        ArrayResize(tempShortLevels, maxOrdersPerSide);
        for (int i = 0; i < maxOrdersPerSide; i++)
        {
            double potentialLevel;
            if (UsePercentage)
            {
                potentialLevel = askPrice * (1 + (workingPriceLevelAdjustment / 100.0 * (i + 1)));
            }
            else
            {
                potentialLevel = NormalizeDouble(
                   askPrice + (workingPriceLevelAdjustment * (i + 1) * MarketInfo(Symbol(), MODE_POINT)),
                   digits);
            }

            if (!IsLevelTooClose(potentialLevel, false))
            {
                if(shortCount < maxOrdersPerSide)
                {
                    tempShortLevels[shortCount] = potentialLevel;
                    shortCount++;
                }
            }
        }
        ArrayResize(shortPriceLevels, shortCount);
        ArrayCopy(shortPriceLevels, tempShortLevels, 0, 0, shortCount);

        Print("Generated ", shortCount, " valid short price levels.");
        for(int i=0; i<shortCount; i++) Print("Short Price Level ", i+1, ": ", shortPriceLevels[i]);
    }
}


//+------------------------------------------------------------------+
//| Close all pending orders                                         |
//+------------------------------------------------------------------+
void CloseAllPendingOrders()
{
   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
      {
         if(OrderType() == OP_BUYLIMIT || OrderType() == OP_SELLLIMIT)
         {
            bool result = OrderDelete(OrderTicket());
            if(!result)
               Print("Failed to delete order. Error: ", GetLastError());
            else
               UpdateChartDisplay(); // Update display after deleting order
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Smart Trailing Stop - Only protects profits                      |
//+------------------------------------------------------------------+
void CheckForTrailingStop()
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES) && OrderSymbol() == Symbol())
      {
         bool isModified = false;
         if(OrderType() == OP_BUY && (TradingMode == MODE_LONG || TradingMode == MODE_MIXED))
         {
            double currentProfit = MarketInfo(Symbol(), MODE_BID) - OrderOpenPrice();
            double currentStop = OrderStopLoss();
            
            if(currentProfit >= workingBreakevenTriggerPoints * point)
            {
               double newStop = OrderOpenPrice() + (currentProfit - workingTrailingStopPoints * point);
               
               if(currentStop == 0 || newStop > currentStop)
               {
                  if(!OrderModify(OrderTicket(), OrderOpenPrice(), newStop, 0, 0, clrNONE))
                     Print("Failed to modify stop. Error: ", GetLastError());
                  else
                     isModified = true;
               }
            }
         }
         else if(OrderType() == OP_SELL && (TradingMode == MODE_SHORT || TradingMode == MODE_MIXED))
         {
            double currentProfit = OrderOpenPrice() - MarketInfo(Symbol(), MODE_ASK);
            double currentStop = OrderStopLoss();
            
            if(currentProfit >= workingBreakevenTriggerPoints * point)
            {
               double newStop = OrderOpenPrice() - (currentProfit - workingTrailingStopPoints * point);
               
               if(currentStop == 0 || newStop < currentStop)
               {
                  if(!OrderModify(OrderTicket(), OrderOpenPrice(), newStop, 0, 0, clrNONE))
                     Print("Failed to modify stop. Error: ", GetLastError());
                  else
                     isModified = true;
               }
            }
         }
         if(isModified) UpdateChartDisplay(); // Update display if an order was modified
      }
   }
}

//+------------------------------------------------------------------+
//| Delete all arrow objects from chart                              |
//+------------------------------------------------------------------+
void DeleteAllArrows()
{
    int total = ObjectsTotal();
    for(int i = total-1; i >= 0; i--)
    {
        string name = ObjectName(i);
        if(ObjectType(name) == OBJ_ARROW)
        {
            ObjectDelete(name);
        }
    }
}
