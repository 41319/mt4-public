//+------------------------------------------------------------------+
//|                                                      HKIndex.mq4 |
//|                        Generated by MetaEditor                   |
//|                                              https://www.mql5.com |
//+------------------------------------------------------------------+
#property copyright "Your Name"
#property link      "https://www.yourwebsite.com"
#property version   "1.07"
#property strict

// Input parameters
input double LotSize = 0.01;
input int TrailingStopPoints = 30 * 10;      // Only activates in profit
input int BreakevenTriggerPoints = 50 * 10;  // Profit level to activate stop
input int MaxOrders = 3;
input int MagicNumber = 12345;
input double PriceLevelAdjustment = 100 * 10;
input bool UsePercentage = false;
input int OrderExpirationHours = 24;         // Pending order expiration

// Global variables
double priceLevels[];
datetime lastCheckDate = 0;
double monthlyVolume = 0;
bool needUpdateLevels = false;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   monthlyVolume = CalculateClosedVolumeThisMonth();
   UpdatePriceLevels();
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("HKIndex EA deinitialized");
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   bool isNewDay = TimeDay(TimeCurrent()) != TimeDay(lastCheckDate);
   
   if(isNewDay)
   {
      monthlyVolume = CalculateClosedVolumeThisMonth();
      Print("New day detected. Monthly volume so far: ", monthlyVolume);
      lastCheckDate = TimeCurrent();
   }
   
   if(needUpdateLevels || isNewDay)
   {
      UpdatePriceLevels();
      CloseAllPendingOrders();
      needUpdateLevels = false;
   }
   
   ManageOrders();
   CheckForTrailingStop();
}

//+------------------------------------------------------------------+
//| Handle order close event                                         |
//+------------------------------------------------------------------+
void OnTrade()
{
   needUpdateLevels = true;
}

//+------------------------------------------------------------------+
//| Count existing orders with matching symbol and magic             |
//+------------------------------------------------------------------+
int CountOrders()
{
   int count = 0;
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber)
         {
            count++;
         }
      }
   }
   return count;
}

//+------------------------------------------------------------------+
//| Place a pending Buy Limit order                                  |
//+------------------------------------------------------------------+
void PlaceOrder(int index)
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   int digits = (int)MarketInfo(Symbol(), MODE_DIGITS);
   double triggerPrice = priceLevels[index];
   datetime expiryTime = TimeCurrent() + OrderExpirationHours * 3600;

   // Safety checks
   if(triggerPrice >= MarketInfo(Symbol(), MODE_ASK))
   {
      Print("Trigger price too high. Skipping. Trigger: ", triggerPrice, " >= Ask: ", MarketInfo(Symbol(), MODE_ASK));
      return;
   }

   Print("Attempting BUYLIMIT @ ", triggerPrice);
   int ticket = OrderSend(Symbol(), OP_BUYLIMIT, LotSize, triggerPrice, 3, 0, 0, "HKIndex EA", MagicNumber, expiryTime, clrGreen);

   if(ticket < 0)
      Print("OrderSend failed. Error: ", GetLastError());
   else
      Print("Order placed. Ticket #", ticket);
}

//+------------------------------------------------------------------+
//| Manage all orders - create new ones if needed                    |
//+------------------------------------------------------------------+
void ManageOrders()
{
   int count = CountOrders();
   
   for(int i = 0; i < MaxOrders; i++)
   {
      bool orderExists = false;
      for(int j = 0; j < OrdersTotal(); j++)
      {
         if(OrderSelect(j, SELECT_BY_POS, MODE_TRADES))
         {
            if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber &&
               MathAbs(OrderOpenPrice() - priceLevels[i]) < MarketInfo(Symbol(), MODE_POINT))
            {
               orderExists = true;
               break;
            }
         }
      }

      if(!orderExists && count < MaxOrders)
      {
         PlaceOrder(i);
         count++;
      }
   }
}

//+------------------------------------------------------------------+
//| Update price levels based on current market price                |
//+------------------------------------------------------------------+
void UpdatePriceLevels()
{
   double currentPrice = MarketInfo(Symbol(), MODE_BID);
   ArrayResize(priceLevels, MaxOrders);
   
   for(int i = 0; i < MaxOrders; i++)
   {
      if(UsePercentage)
      {
         priceLevels[i] = currentPrice * (1 - (PriceLevelAdjustment / 100.0 * (i + 1)));
      }
      else
      {
         priceLevels[i] = NormalizeDouble(currentPrice - (PriceLevelAdjustment * (i + 1) * MarketInfo(Symbol(), MODE_POINT)), (int)MarketInfo(Symbol(), MODE_DIGITS));
      }
      Print("Price Level ", i+1, ": ", priceLevels[i]);
   }
}

//+------------------------------------------------------------------+
//| Close all pending orders                                         |
//+------------------------------------------------------------------+
void CloseAllPendingOrders()
{
   for(int i = OrdersTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber && OrderType() == OP_BUYLIMIT)
         {
            bool result = OrderDelete(OrderTicket());
            if(!result)
               Print("Failed to delete order. Error: ", GetLastError());
         }
      }
   }
}

//+------------------------------------------------------------------+
//| Calculate closed order volume for current month                  |
//+------------------------------------------------------------------+
double CalculateClosedVolumeThisMonth()
{
   double totalVolume = 0.0;
   datetime monthStart = iTime(NULL, PERIOD_MN1, 0);
   
   for(int i = OrdersHistoryTotal()-1; i >= 0; i--)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
      {
         if(OrderCloseTime() >= monthStart && OrderMagicNumber() == MagicNumber)
         {
            totalVolume += OrderLots();
         }
      }
   }
   return totalVolume;
}

//+------------------------------------------------------------------+
//| Smart Trailing Stop - Only protects profits                      |
//+------------------------------------------------------------------+
void CheckForTrailingStop()
{
   double point = MarketInfo(Symbol(), MODE_POINT);
   
   for(int i = 0; i < OrdersTotal(); i++)
   {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
      {
         if(OrderSymbol() == Symbol() && OrderMagicNumber() == MagicNumber && OrderType() == OP_BUY)
         {
            double currentProfit = MarketInfo(Symbol(), MODE_BID) - OrderOpenPrice();
            double currentStop = OrderStopLoss();
            
            // Check if we should activate stop protection
            if(currentProfit >= BreakevenTriggerPoints * point)
            {
               double newStop = OrderOpenPrice() + (currentProfit - TrailingStopPoints * point);
               
               // Only move stop if it's higher than current stop or no stop set
               if(currentStop == 0 || newStop > currentStop)
               {
                  if(!OrderModify(OrderTicket(), OrderOpenPrice(), newStop, 0, 0, clrNONE))
                     Print("Failed to modify stop. Error: ", GetLastError());
               }
            }
         }
      }
   }
}